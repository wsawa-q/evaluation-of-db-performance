/*
 * This file is generated by jOOQ.
 */
package cz.cuni.mff.java.kurinna.microservice.model.tables;


import cz.cuni.mff.java.kurinna.microservice.model.Db;
import cz.cuni.mff.java.kurinna.microservice.model.tables.records.SupplierRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Supplier extends TableImpl<SupplierRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>db.supplier</code>
     */
    public static final Supplier SUPPLIER = new Supplier();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SupplierRecord> getRecordType() {
        return SupplierRecord.class;
    }

    /**
     * The column <code>db.supplier.s_suppkey</code>.
     */
    public final TableField<SupplierRecord, Long> S_SUPPKEY = createField(DSL.name("s_suppkey"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>db.supplier.s_name</code>.
     */
    public final TableField<SupplierRecord, String> S_NAME = createField(DSL.name("s_name"), SQLDataType.CHAR(25).nullable(false), this, "");

    /**
     * The column <code>db.supplier.s_address</code>.
     */
    public final TableField<SupplierRecord, String> S_ADDRESS = createField(DSL.name("s_address"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>db.supplier.s_nationkey</code>.
     */
    public final TableField<SupplierRecord, Integer> S_NATIONKEY = createField(DSL.name("s_nationkey"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>db.supplier.s_phone</code>.
     */
    public final TableField<SupplierRecord, String> S_PHONE = createField(DSL.name("s_phone"), SQLDataType.CHAR(15).nullable(false), this, "");

    /**
     * The column <code>db.supplier.s_acctbal</code>.
     */
    public final TableField<SupplierRecord, Double> S_ACCTBAL = createField(DSL.name("s_acctbal"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>db.supplier.s_comment</code>.
     */
    public final TableField<SupplierRecord, String> S_COMMENT = createField(DSL.name("s_comment"), SQLDataType.VARCHAR(101).nullable(false), this, "");

    private Supplier(Name alias, Table<SupplierRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Supplier(Name alias, Table<SupplierRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>db.supplier</code> table reference
     */
    public Supplier(String alias) {
        this(DSL.name(alias), SUPPLIER);
    }

    /**
     * Create an aliased <code>db.supplier</code> table reference
     */
    public Supplier(Name alias) {
        this(alias, SUPPLIER);
    }

    /**
     * Create a <code>db.supplier</code> table reference
     */
    public Supplier() {
        this(DSL.name("supplier"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB;
    }

    @Override
    public Supplier as(String alias) {
        return new Supplier(DSL.name(alias), this);
    }

    @Override
    public Supplier as(Name alias) {
        return new Supplier(alias, this);
    }

    @Override
    public Supplier as(Table<?> alias) {
        return new Supplier(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Supplier rename(String name) {
        return new Supplier(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Supplier rename(Name name) {
        return new Supplier(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Supplier rename(Table<?> name) {
        return new Supplier(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Supplier where(Condition condition) {
        return new Supplier(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Supplier where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Supplier where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Supplier where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Supplier where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Supplier where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Supplier where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Supplier where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Supplier whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Supplier whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
