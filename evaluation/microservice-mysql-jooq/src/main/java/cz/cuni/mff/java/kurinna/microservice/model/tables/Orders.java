/*
 * This file is generated by jOOQ.
 */
package cz.cuni.mff.java.kurinna.microservice.model.tables;


import cz.cuni.mff.java.kurinna.microservice.model.Db;
import cz.cuni.mff.java.kurinna.microservice.model.tables.records.OrdersRecord;

import java.time.LocalDate;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Orders extends TableImpl<OrdersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>db.orders</code>
     */
    public static final Orders ORDERS = new Orders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrdersRecord> getRecordType() {
        return OrdersRecord.class;
    }

    /**
     * The column <code>db.orders.o_orderkey</code>.
     */
    public final TableField<OrdersRecord, Long> O_ORDERKEY = createField(DSL.name("o_orderkey"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>db.orders.o_custkey</code>.
     */
    public final TableField<OrdersRecord, Long> O_CUSTKEY = createField(DSL.name("o_custkey"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>db.orders.o_orderstatus</code>.
     */
    public final TableField<OrdersRecord, String> O_ORDERSTATUS = createField(DSL.name("o_orderstatus"), SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>db.orders.o_totalprice</code>.
     */
    public final TableField<OrdersRecord, Double> O_TOTALPRICE = createField(DSL.name("o_totalprice"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>db.orders.o_orderdate</code>.
     */
    public final TableField<OrdersRecord, LocalDate> O_ORDERDATE = createField(DSL.name("o_orderdate"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>db.orders.o_orderpriority</code>.
     */
    public final TableField<OrdersRecord, String> O_ORDERPRIORITY = createField(DSL.name("o_orderpriority"), SQLDataType.CHAR(15).nullable(false), this, "");

    /**
     * The column <code>db.orders.o_clerk</code>.
     */
    public final TableField<OrdersRecord, String> O_CLERK = createField(DSL.name("o_clerk"), SQLDataType.CHAR(15).nullable(false), this, "");

    /**
     * The column <code>db.orders.o_shippriority</code>.
     */
    public final TableField<OrdersRecord, Integer> O_SHIPPRIORITY = createField(DSL.name("o_shippriority"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>db.orders.o_comment</code>.
     */
    public final TableField<OrdersRecord, String> O_COMMENT = createField(DSL.name("o_comment"), SQLDataType.VARCHAR(79).nullable(false), this, "");

    private Orders(Name alias, Table<OrdersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Orders(Name alias, Table<OrdersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>db.orders</code> table reference
     */
    public Orders(String alias) {
        this(DSL.name(alias), ORDERS);
    }

    /**
     * Create an aliased <code>db.orders</code> table reference
     */
    public Orders(Name alias) {
        this(alias, ORDERS);
    }

    /**
     * Create a <code>db.orders</code> table reference
     */
    public Orders() {
        this(DSL.name("orders"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB;
    }

    @Override
    public Orders as(String alias) {
        return new Orders(DSL.name(alias), this);
    }

    @Override
    public Orders as(Name alias) {
        return new Orders(alias, this);
    }

    @Override
    public Orders as(Table<?> alias) {
        return new Orders(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(String name) {
        return new Orders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(Name name) {
        return new Orders(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(Table<?> name) {
        return new Orders(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Orders where(Condition condition) {
        return new Orders(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Orders where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Orders where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Orders where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Orders where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Orders where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Orders where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Orders where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Orders whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Orders whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
