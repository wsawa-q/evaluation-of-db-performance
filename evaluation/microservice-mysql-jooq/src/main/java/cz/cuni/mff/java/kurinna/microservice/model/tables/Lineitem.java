/*
 * This file is generated by jOOQ.
 */
package cz.cuni.mff.java.kurinna.microservice.model.tables;


import cz.cuni.mff.java.kurinna.microservice.model.Db;
import cz.cuni.mff.java.kurinna.microservice.model.tables.records.LineitemRecord;

import java.time.LocalDate;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Lineitem extends TableImpl<LineitemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>db.lineitem</code>
     */
    public static final Lineitem LINEITEM = new Lineitem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LineitemRecord> getRecordType() {
        return LineitemRecord.class;
    }

    /**
     * The column <code>db.lineitem.l_orderkey</code>.
     */
    public final TableField<LineitemRecord, Long> L_ORDERKEY = createField(DSL.name("l_orderkey"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>db.lineitem.l_partkey</code>.
     */
    public final TableField<LineitemRecord, Long> L_PARTKEY = createField(DSL.name("l_partkey"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>db.lineitem.l_suppkey</code>.
     */
    public final TableField<LineitemRecord, Long> L_SUPPKEY = createField(DSL.name("l_suppkey"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>db.lineitem.l_linenumber</code>.
     */
    public final TableField<LineitemRecord, Long> L_LINENUMBER = createField(DSL.name("l_linenumber"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>db.lineitem.l_quantity</code>.
     */
    public final TableField<LineitemRecord, Double> L_QUANTITY = createField(DSL.name("l_quantity"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>db.lineitem.l_extendedprice</code>.
     */
    public final TableField<LineitemRecord, Double> L_EXTENDEDPRICE = createField(DSL.name("l_extendedprice"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>db.lineitem.l_discount</code>.
     */
    public final TableField<LineitemRecord, Double> L_DISCOUNT = createField(DSL.name("l_discount"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>db.lineitem.l_tax</code>.
     */
    public final TableField<LineitemRecord, Double> L_TAX = createField(DSL.name("l_tax"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>db.lineitem.l_returnflag</code>.
     */
    public final TableField<LineitemRecord, String> L_RETURNFLAG = createField(DSL.name("l_returnflag"), SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>db.lineitem.l_linestatus</code>.
     */
    public final TableField<LineitemRecord, String> L_LINESTATUS = createField(DSL.name("l_linestatus"), SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>db.lineitem.l_shipdate</code>.
     */
    public final TableField<LineitemRecord, LocalDate> L_SHIPDATE = createField(DSL.name("l_shipdate"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>db.lineitem.l_commitdate</code>.
     */
    public final TableField<LineitemRecord, LocalDate> L_COMMITDATE = createField(DSL.name("l_commitdate"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>db.lineitem.l_receiptdate</code>.
     */
    public final TableField<LineitemRecord, LocalDate> L_RECEIPTDATE = createField(DSL.name("l_receiptdate"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>db.lineitem.l_shipinstruct</code>.
     */
    public final TableField<LineitemRecord, String> L_SHIPINSTRUCT = createField(DSL.name("l_shipinstruct"), SQLDataType.CHAR(25).nullable(false), this, "");

    /**
     * The column <code>db.lineitem.l_shipmode</code>.
     */
    public final TableField<LineitemRecord, String> L_SHIPMODE = createField(DSL.name("l_shipmode"), SQLDataType.CHAR(10).nullable(false), this, "");

    /**
     * The column <code>db.lineitem.l_comment</code>.
     */
    public final TableField<LineitemRecord, String> L_COMMENT = createField(DSL.name("l_comment"), SQLDataType.VARCHAR(44).nullable(false), this, "");

    private Lineitem(Name alias, Table<LineitemRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Lineitem(Name alias, Table<LineitemRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>db.lineitem</code> table reference
     */
    public Lineitem(String alias) {
        this(DSL.name(alias), LINEITEM);
    }

    /**
     * Create an aliased <code>db.lineitem</code> table reference
     */
    public Lineitem(Name alias) {
        this(alias, LINEITEM);
    }

    /**
     * Create a <code>db.lineitem</code> table reference
     */
    public Lineitem() {
        this(DSL.name("lineitem"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB;
    }

    @Override
    public Lineitem as(String alias) {
        return new Lineitem(DSL.name(alias), this);
    }

    @Override
    public Lineitem as(Name alias) {
        return new Lineitem(alias, this);
    }

    @Override
    public Lineitem as(Table<?> alias) {
        return new Lineitem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Lineitem rename(String name) {
        return new Lineitem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lineitem rename(Name name) {
        return new Lineitem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lineitem rename(Table<?> name) {
        return new Lineitem(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lineitem where(Condition condition) {
        return new Lineitem(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lineitem where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lineitem where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lineitem where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lineitem where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lineitem where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lineitem where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lineitem where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lineitem whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lineitem whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
