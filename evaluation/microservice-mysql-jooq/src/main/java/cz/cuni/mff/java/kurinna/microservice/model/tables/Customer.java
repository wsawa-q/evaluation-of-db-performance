/*
 * This file is generated by jOOQ.
 */
package cz.cuni.mff.java.kurinna.microservice.model.tables;


import cz.cuni.mff.java.kurinna.microservice.model.Db;
import cz.cuni.mff.java.kurinna.microservice.model.tables.records.CustomerRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Customer extends TableImpl<CustomerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>db.customer</code>
     */
    public static final Customer CUSTOMER = new Customer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomerRecord> getRecordType() {
        return CustomerRecord.class;
    }

    /**
     * The column <code>db.customer.c_custkey</code>.
     */
    public final TableField<CustomerRecord, Long> C_CUSTKEY = createField(DSL.name("c_custkey"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>db.customer.c_name</code>.
     */
    public final TableField<CustomerRecord, String> C_NAME = createField(DSL.name("c_name"), SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * The column <code>db.customer.c_address</code>.
     */
    public final TableField<CustomerRecord, String> C_ADDRESS = createField(DSL.name("c_address"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>db.customer.c_nationkey</code>.
     */
    public final TableField<CustomerRecord, Integer> C_NATIONKEY = createField(DSL.name("c_nationkey"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>db.customer.c_phone</code>.
     */
    public final TableField<CustomerRecord, String> C_PHONE = createField(DSL.name("c_phone"), SQLDataType.CHAR(15).nullable(false), this, "");

    /**
     * The column <code>db.customer.c_acctbal</code>.
     */
    public final TableField<CustomerRecord, Double> C_ACCTBAL = createField(DSL.name("c_acctbal"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>db.customer.c_mktsegment</code>.
     */
    public final TableField<CustomerRecord, String> C_MKTSEGMENT = createField(DSL.name("c_mktsegment"), SQLDataType.CHAR(10).nullable(false), this, "");

    /**
     * The column <code>db.customer.c_comment</code>.
     */
    public final TableField<CustomerRecord, String> C_COMMENT = createField(DSL.name("c_comment"), SQLDataType.VARCHAR(117).nullable(false), this, "");

    private Customer(Name alias, Table<CustomerRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Customer(Name alias, Table<CustomerRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>db.customer</code> table reference
     */
    public Customer(String alias) {
        this(DSL.name(alias), CUSTOMER);
    }

    /**
     * Create an aliased <code>db.customer</code> table reference
     */
    public Customer(Name alias) {
        this(alias, CUSTOMER);
    }

    /**
     * Create a <code>db.customer</code> table reference
     */
    public Customer() {
        this(DSL.name("customer"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB;
    }

    @Override
    public Customer as(String alias) {
        return new Customer(DSL.name(alias), this);
    }

    @Override
    public Customer as(Name alias) {
        return new Customer(alias, this);
    }

    @Override
    public Customer as(Table<?> alias) {
        return new Customer(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Customer rename(String name) {
        return new Customer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Customer rename(Name name) {
        return new Customer(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Customer rename(Table<?> name) {
        return new Customer(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Customer where(Condition condition) {
        return new Customer(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Customer where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Customer where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Customer where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Customer where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Customer where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Customer where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Customer where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Customer whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Customer whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
