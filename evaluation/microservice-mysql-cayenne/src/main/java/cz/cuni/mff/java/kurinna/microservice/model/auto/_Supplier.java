package cz.cuni.mff.java.kurinna.microservice.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

/**
 * Class _Supplier was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Supplier extends BaseDataObject {

    private static final long serialVersionUID = 1L;


    public static final NumericProperty<Double> S_ACCTBAL = PropertyFactory.createNumeric("sAcctbal", Double.class);
    public static final StringProperty<String> S_ADDRESS = PropertyFactory.createString("sAddress", String.class);
    public static final StringProperty<String> S_COMMENT = PropertyFactory.createString("sComment", String.class);
    public static final StringProperty<String> S_NAME = PropertyFactory.createString("sName", String.class);
    public static final NumericProperty<Integer> S_NATIONKEY = PropertyFactory.createNumeric("sNationkey", Integer.class);
    public static final StringProperty<String> S_PHONE = PropertyFactory.createString("sPhone", String.class);
    public static final NumericProperty<Long> S_SUPPKEY = PropertyFactory.createNumeric("sSuppkey", Long.class);

    protected double sAcctbal;
    protected String sAddress;
    protected String sComment;
    protected String sName;
    protected int sNationkey;
    protected String sPhone;
    protected long sSuppkey;


    public void setSAcctbal(double sAcctbal) {
        beforePropertyWrite("sAcctbal", this.sAcctbal, sAcctbal);
        this.sAcctbal = sAcctbal;
    }

    public double getSAcctbal() {
        beforePropertyRead("sAcctbal");
        return this.sAcctbal;
    }

    public void setSAddress(String sAddress) {
        beforePropertyWrite("sAddress", this.sAddress, sAddress);
        this.sAddress = sAddress;
    }

    public String getSAddress() {
        beforePropertyRead("sAddress");
        return this.sAddress;
    }

    public void setSComment(String sComment) {
        beforePropertyWrite("sComment", this.sComment, sComment);
        this.sComment = sComment;
    }

    public String getSComment() {
        beforePropertyRead("sComment");
        return this.sComment;
    }

    public void setSName(String sName) {
        beforePropertyWrite("sName", this.sName, sName);
        this.sName = sName;
    }

    public String getSName() {
        beforePropertyRead("sName");
        return this.sName;
    }

    public void setSNationkey(int sNationkey) {
        beforePropertyWrite("sNationkey", this.sNationkey, sNationkey);
        this.sNationkey = sNationkey;
    }

    public int getSNationkey() {
        beforePropertyRead("sNationkey");
        return this.sNationkey;
    }

    public void setSPhone(String sPhone) {
        beforePropertyWrite("sPhone", this.sPhone, sPhone);
        this.sPhone = sPhone;
    }

    public String getSPhone() {
        beforePropertyRead("sPhone");
        return this.sPhone;
    }

    public void setSSuppkey(long sSuppkey) {
        beforePropertyWrite("sSuppkey", this.sSuppkey, sSuppkey);
        this.sSuppkey = sSuppkey;
    }

    public long getSSuppkey() {
        beforePropertyRead("sSuppkey");
        return this.sSuppkey;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "sAcctbal":
                return this.sAcctbal;
            case "sAddress":
                return this.sAddress;
            case "sComment":
                return this.sComment;
            case "sName":
                return this.sName;
            case "sNationkey":
                return this.sNationkey;
            case "sPhone":
                return this.sPhone;
            case "sSuppkey":
                return this.sSuppkey;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "sAcctbal":
                this.sAcctbal = val == null ? 0 : (double)val;
                break;
            case "sAddress":
                this.sAddress = (String)val;
                break;
            case "sComment":
                this.sComment = (String)val;
                break;
            case "sName":
                this.sName = (String)val;
                break;
            case "sNationkey":
                this.sNationkey = val == null ? 0 : (int)val;
                break;
            case "sPhone":
                this.sPhone = (String)val;
                break;
            case "sSuppkey":
                this.sSuppkey = val == null ? 0 : (long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeDouble(this.sAcctbal);
        out.writeObject(this.sAddress);
        out.writeObject(this.sComment);
        out.writeObject(this.sName);
        out.writeInt(this.sNationkey);
        out.writeObject(this.sPhone);
        out.writeLong(this.sSuppkey);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.sAcctbal = in.readDouble();
        this.sAddress = (String)in.readObject();
        this.sComment = (String)in.readObject();
        this.sName = (String)in.readObject();
        this.sNationkey = in.readInt();
        this.sPhone = (String)in.readObject();
        this.sSuppkey = in.readLong();
    }

}
