package cz.cuni.mff.java.kurinna.microservice.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDate;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

/**
 * Class _Lineitem was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Lineitem extends BaseDataObject {

    private static final long serialVersionUID = 1L;


    public static final StringProperty<String> L_COMMENT = PropertyFactory.createString("lComment", String.class);
    public static final DateProperty<LocalDate> L_COMMITDATE = PropertyFactory.createDate("lCommitdate", LocalDate.class);
    public static final NumericProperty<Double> L_DISCOUNT = PropertyFactory.createNumeric("lDiscount", Double.class);
    public static final NumericProperty<Double> L_EXTENDEDPRICE = PropertyFactory.createNumeric("lExtendedprice", Double.class);
    public static final NumericProperty<Long> L_LINENUMBER = PropertyFactory.createNumeric("lLinenumber", Long.class);
    public static final StringProperty<String> L_LINESTATUS = PropertyFactory.createString("lLinestatus", String.class);
    public static final NumericProperty<Long> L_ORDERKEY = PropertyFactory.createNumeric("lOrderkey", Long.class);
    public static final NumericProperty<Long> L_PARTKEY = PropertyFactory.createNumeric("lPartkey", Long.class);
    public static final NumericProperty<Double> L_QUANTITY = PropertyFactory.createNumeric("lQuantity", Double.class);
    public static final DateProperty<LocalDate> L_RECEIPTDATE = PropertyFactory.createDate("lReceiptdate", LocalDate.class);
    public static final StringProperty<String> L_RETURNFLAG = PropertyFactory.createString("lReturnflag", String.class);
    public static final DateProperty<LocalDate> L_SHIPDATE = PropertyFactory.createDate("lShipdate", LocalDate.class);
    public static final StringProperty<String> L_SHIPINSTRUCT = PropertyFactory.createString("lShipinstruct", String.class);
    public static final StringProperty<String> L_SHIPMODE = PropertyFactory.createString("lShipmode", String.class);
    public static final NumericProperty<Long> L_SUPPKEY = PropertyFactory.createNumeric("lSuppkey", Long.class);
    public static final NumericProperty<Double> L_TAX = PropertyFactory.createNumeric("lTax", Double.class);

    protected String lComment;
    protected LocalDate lCommitdate;
    protected double lDiscount;
    protected double lExtendedprice;
    protected long lLinenumber;
    protected String lLinestatus;
    protected long lOrderkey;
    protected long lPartkey;
    protected double lQuantity;
    protected LocalDate lReceiptdate;
    protected String lReturnflag;
    protected LocalDate lShipdate;
    protected String lShipinstruct;
    protected String lShipmode;
    protected long lSuppkey;
    protected double lTax;


    public void setLComment(String lComment) {
        beforePropertyWrite("lComment", this.lComment, lComment);
        this.lComment = lComment;
    }

    public String getLComment() {
        beforePropertyRead("lComment");
        return this.lComment;
    }

    public void setLCommitdate(LocalDate lCommitdate) {
        beforePropertyWrite("lCommitdate", this.lCommitdate, lCommitdate);
        this.lCommitdate = lCommitdate;
    }

    public LocalDate getLCommitdate() {
        beforePropertyRead("lCommitdate");
        return this.lCommitdate;
    }

    public void setLDiscount(double lDiscount) {
        beforePropertyWrite("lDiscount", this.lDiscount, lDiscount);
        this.lDiscount = lDiscount;
    }

    public double getLDiscount() {
        beforePropertyRead("lDiscount");
        return this.lDiscount;
    }

    public void setLExtendedprice(double lExtendedprice) {
        beforePropertyWrite("lExtendedprice", this.lExtendedprice, lExtendedprice);
        this.lExtendedprice = lExtendedprice;
    }

    public double getLExtendedprice() {
        beforePropertyRead("lExtendedprice");
        return this.lExtendedprice;
    }

    public void setLLinenumber(long lLinenumber) {
        beforePropertyWrite("lLinenumber", this.lLinenumber, lLinenumber);
        this.lLinenumber = lLinenumber;
    }

    public long getLLinenumber() {
        beforePropertyRead("lLinenumber");
        return this.lLinenumber;
    }

    public void setLLinestatus(String lLinestatus) {
        beforePropertyWrite("lLinestatus", this.lLinestatus, lLinestatus);
        this.lLinestatus = lLinestatus;
    }

    public String getLLinestatus() {
        beforePropertyRead("lLinestatus");
        return this.lLinestatus;
    }

    public void setLOrderkey(long lOrderkey) {
        beforePropertyWrite("lOrderkey", this.lOrderkey, lOrderkey);
        this.lOrderkey = lOrderkey;
    }

    public long getLOrderkey() {
        beforePropertyRead("lOrderkey");
        return this.lOrderkey;
    }

    public void setLPartkey(long lPartkey) {
        beforePropertyWrite("lPartkey", this.lPartkey, lPartkey);
        this.lPartkey = lPartkey;
    }

    public long getLPartkey() {
        beforePropertyRead("lPartkey");
        return this.lPartkey;
    }

    public void setLQuantity(double lQuantity) {
        beforePropertyWrite("lQuantity", this.lQuantity, lQuantity);
        this.lQuantity = lQuantity;
    }

    public double getLQuantity() {
        beforePropertyRead("lQuantity");
        return this.lQuantity;
    }

    public void setLReceiptdate(LocalDate lReceiptdate) {
        beforePropertyWrite("lReceiptdate", this.lReceiptdate, lReceiptdate);
        this.lReceiptdate = lReceiptdate;
    }

    public LocalDate getLReceiptdate() {
        beforePropertyRead("lReceiptdate");
        return this.lReceiptdate;
    }

    public void setLReturnflag(String lReturnflag) {
        beforePropertyWrite("lReturnflag", this.lReturnflag, lReturnflag);
        this.lReturnflag = lReturnflag;
    }

    public String getLReturnflag() {
        beforePropertyRead("lReturnflag");
        return this.lReturnflag;
    }

    public void setLShipdate(LocalDate lShipdate) {
        beforePropertyWrite("lShipdate", this.lShipdate, lShipdate);
        this.lShipdate = lShipdate;
    }

    public LocalDate getLShipdate() {
        beforePropertyRead("lShipdate");
        return this.lShipdate;
    }

    public void setLShipinstruct(String lShipinstruct) {
        beforePropertyWrite("lShipinstruct", this.lShipinstruct, lShipinstruct);
        this.lShipinstruct = lShipinstruct;
    }

    public String getLShipinstruct() {
        beforePropertyRead("lShipinstruct");
        return this.lShipinstruct;
    }

    public void setLShipmode(String lShipmode) {
        beforePropertyWrite("lShipmode", this.lShipmode, lShipmode);
        this.lShipmode = lShipmode;
    }

    public String getLShipmode() {
        beforePropertyRead("lShipmode");
        return this.lShipmode;
    }

    public void setLSuppkey(long lSuppkey) {
        beforePropertyWrite("lSuppkey", this.lSuppkey, lSuppkey);
        this.lSuppkey = lSuppkey;
    }

    public long getLSuppkey() {
        beforePropertyRead("lSuppkey");
        return this.lSuppkey;
    }

    public void setLTax(double lTax) {
        beforePropertyWrite("lTax", this.lTax, lTax);
        this.lTax = lTax;
    }

    public double getLTax() {
        beforePropertyRead("lTax");
        return this.lTax;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "lComment":
                return this.lComment;
            case "lCommitdate":
                return this.lCommitdate;
            case "lDiscount":
                return this.lDiscount;
            case "lExtendedprice":
                return this.lExtendedprice;
            case "lLinenumber":
                return this.lLinenumber;
            case "lLinestatus":
                return this.lLinestatus;
            case "lOrderkey":
                return this.lOrderkey;
            case "lPartkey":
                return this.lPartkey;
            case "lQuantity":
                return this.lQuantity;
            case "lReceiptdate":
                return this.lReceiptdate;
            case "lReturnflag":
                return this.lReturnflag;
            case "lShipdate":
                return this.lShipdate;
            case "lShipinstruct":
                return this.lShipinstruct;
            case "lShipmode":
                return this.lShipmode;
            case "lSuppkey":
                return this.lSuppkey;
            case "lTax":
                return this.lTax;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "lComment":
                this.lComment = (String)val;
                break;
            case "lCommitdate":
                this.lCommitdate = (LocalDate)val;
                break;
            case "lDiscount":
                this.lDiscount = val == null ? 0 : (double)val;
                break;
            case "lExtendedprice":
                this.lExtendedprice = val == null ? 0 : (double)val;
                break;
            case "lLinenumber":
                this.lLinenumber = val == null ? 0 : (long)val;
                break;
            case "lLinestatus":
                this.lLinestatus = (String)val;
                break;
            case "lOrderkey":
                this.lOrderkey = val == null ? 0 : (long)val;
                break;
            case "lPartkey":
                this.lPartkey = val == null ? 0 : (long)val;
                break;
            case "lQuantity":
                this.lQuantity = val == null ? 0 : (double)val;
                break;
            case "lReceiptdate":
                this.lReceiptdate = (LocalDate)val;
                break;
            case "lReturnflag":
                this.lReturnflag = (String)val;
                break;
            case "lShipdate":
                this.lShipdate = (LocalDate)val;
                break;
            case "lShipinstruct":
                this.lShipinstruct = (String)val;
                break;
            case "lShipmode":
                this.lShipmode = (String)val;
                break;
            case "lSuppkey":
                this.lSuppkey = val == null ? 0 : (long)val;
                break;
            case "lTax":
                this.lTax = val == null ? 0 : (double)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.lComment);
        out.writeObject(this.lCommitdate);
        out.writeDouble(this.lDiscount);
        out.writeDouble(this.lExtendedprice);
        out.writeLong(this.lLinenumber);
        out.writeObject(this.lLinestatus);
        out.writeLong(this.lOrderkey);
        out.writeLong(this.lPartkey);
        out.writeDouble(this.lQuantity);
        out.writeObject(this.lReceiptdate);
        out.writeObject(this.lReturnflag);
        out.writeObject(this.lShipdate);
        out.writeObject(this.lShipinstruct);
        out.writeObject(this.lShipmode);
        out.writeLong(this.lSuppkey);
        out.writeDouble(this.lTax);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.lComment = (String)in.readObject();
        this.lCommitdate = (LocalDate)in.readObject();
        this.lDiscount = in.readDouble();
        this.lExtendedprice = in.readDouble();
        this.lLinenumber = in.readLong();
        this.lLinestatus = (String)in.readObject();
        this.lOrderkey = in.readLong();
        this.lPartkey = in.readLong();
        this.lQuantity = in.readDouble();
        this.lReceiptdate = (LocalDate)in.readObject();
        this.lReturnflag = (String)in.readObject();
        this.lShipdate = (LocalDate)in.readObject();
        this.lShipinstruct = (String)in.readObject();
        this.lShipmode = (String)in.readObject();
        this.lSuppkey = in.readLong();
        this.lTax = in.readDouble();
    }

}
