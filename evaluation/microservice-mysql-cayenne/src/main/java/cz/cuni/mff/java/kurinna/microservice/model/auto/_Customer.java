package cz.cuni.mff.java.kurinna.microservice.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

/**
 * Class _Customer was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Customer extends BaseDataObject {

    private static final long serialVersionUID = 1L;


    public static final NumericProperty<Double> C_ACCTBAL = PropertyFactory.createNumeric("cAcctbal", Double.class);
    public static final StringProperty<String> C_ADDRESS = PropertyFactory.createString("cAddress", String.class);
    public static final StringProperty<String> C_COMMENT = PropertyFactory.createString("cComment", String.class);
    public static final NumericProperty<Long> C_CUSTKEY = PropertyFactory.createNumeric("cCustkey", Long.class);
    public static final StringProperty<String> C_MKTSEGMENT = PropertyFactory.createString("cMktsegment", String.class);
    public static final StringProperty<String> C_NAME = PropertyFactory.createString("cName", String.class);
    public static final NumericProperty<Integer> C_NATIONKEY = PropertyFactory.createNumeric("cNationkey", Integer.class);
    public static final StringProperty<String> C_PHONE = PropertyFactory.createString("cPhone", String.class);

    protected double cAcctbal;
    protected String cAddress;
    protected String cComment;
    protected long cCustkey;
    protected String cMktsegment;
    protected String cName;
    protected int cNationkey;
    protected String cPhone;


    public void setCAcctbal(double cAcctbal) {
        beforePropertyWrite("cAcctbal", this.cAcctbal, cAcctbal);
        this.cAcctbal = cAcctbal;
    }

    public double getCAcctbal() {
        beforePropertyRead("cAcctbal");
        return this.cAcctbal;
    }

    public void setCAddress(String cAddress) {
        beforePropertyWrite("cAddress", this.cAddress, cAddress);
        this.cAddress = cAddress;
    }

    public String getCAddress() {
        beforePropertyRead("cAddress");
        return this.cAddress;
    }

    public void setCComment(String cComment) {
        beforePropertyWrite("cComment", this.cComment, cComment);
        this.cComment = cComment;
    }

    public String getCComment() {
        beforePropertyRead("cComment");
        return this.cComment;
    }

    public void setCCustkey(long cCustkey) {
        beforePropertyWrite("cCustkey", this.cCustkey, cCustkey);
        this.cCustkey = cCustkey;
    }

    public long getCCustkey() {
        beforePropertyRead("cCustkey");
        return this.cCustkey;
    }

    public void setCMktsegment(String cMktsegment) {
        beforePropertyWrite("cMktsegment", this.cMktsegment, cMktsegment);
        this.cMktsegment = cMktsegment;
    }

    public String getCMktsegment() {
        beforePropertyRead("cMktsegment");
        return this.cMktsegment;
    }

    public void setCName(String cName) {
        beforePropertyWrite("cName", this.cName, cName);
        this.cName = cName;
    }

    public String getCName() {
        beforePropertyRead("cName");
        return this.cName;
    }

    public void setCNationkey(int cNationkey) {
        beforePropertyWrite("cNationkey", this.cNationkey, cNationkey);
        this.cNationkey = cNationkey;
    }

    public int getCNationkey() {
        beforePropertyRead("cNationkey");
        return this.cNationkey;
    }

    public void setCPhone(String cPhone) {
        beforePropertyWrite("cPhone", this.cPhone, cPhone);
        this.cPhone = cPhone;
    }

    public String getCPhone() {
        beforePropertyRead("cPhone");
        return this.cPhone;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "cAcctbal":
                return this.cAcctbal;
            case "cAddress":
                return this.cAddress;
            case "cComment":
                return this.cComment;
            case "cCustkey":
                return this.cCustkey;
            case "cMktsegment":
                return this.cMktsegment;
            case "cName":
                return this.cName;
            case "cNationkey":
                return this.cNationkey;
            case "cPhone":
                return this.cPhone;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "cAcctbal":
                this.cAcctbal = val == null ? 0 : (double)val;
                break;
            case "cAddress":
                this.cAddress = (String)val;
                break;
            case "cComment":
                this.cComment = (String)val;
                break;
            case "cCustkey":
                this.cCustkey = val == null ? 0 : (long)val;
                break;
            case "cMktsegment":
                this.cMktsegment = (String)val;
                break;
            case "cName":
                this.cName = (String)val;
                break;
            case "cNationkey":
                this.cNationkey = val == null ? 0 : (int)val;
                break;
            case "cPhone":
                this.cPhone = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeDouble(this.cAcctbal);
        out.writeObject(this.cAddress);
        out.writeObject(this.cComment);
        out.writeLong(this.cCustkey);
        out.writeObject(this.cMktsegment);
        out.writeObject(this.cName);
        out.writeInt(this.cNationkey);
        out.writeObject(this.cPhone);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.cAcctbal = in.readDouble();
        this.cAddress = (String)in.readObject();
        this.cComment = (String)in.readObject();
        this.cCustkey = in.readLong();
        this.cMktsegment = (String)in.readObject();
        this.cName = (String)in.readObject();
        this.cNationkey = in.readInt();
        this.cPhone = (String)in.readObject();
    }

}
