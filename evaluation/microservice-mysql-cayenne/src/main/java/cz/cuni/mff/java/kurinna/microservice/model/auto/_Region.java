package cz.cuni.mff.java.kurinna.microservice.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

/**
 * Class _Region was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Region extends BaseDataObject {

    private static final long serialVersionUID = 1L;


    public static final StringProperty<String> R_COMMENT = PropertyFactory.createString("rComment", String.class);
    public static final StringProperty<String> R_NAME = PropertyFactory.createString("rName", String.class);
    public static final NumericProperty<Integer> R_REGIONKEY = PropertyFactory.createNumeric("rRegionkey", Integer.class);

    protected String rComment;
    protected String rName;
    protected int rRegionkey;


    public void setRComment(String rComment) {
        beforePropertyWrite("rComment", this.rComment, rComment);
        this.rComment = rComment;
    }

    public String getRComment() {
        beforePropertyRead("rComment");
        return this.rComment;
    }

    public void setRName(String rName) {
        beforePropertyWrite("rName", this.rName, rName);
        this.rName = rName;
    }

    public String getRName() {
        beforePropertyRead("rName");
        return this.rName;
    }

    public void setRRegionkey(int rRegionkey) {
        beforePropertyWrite("rRegionkey", this.rRegionkey, rRegionkey);
        this.rRegionkey = rRegionkey;
    }

    public int getRRegionkey() {
        beforePropertyRead("rRegionkey");
        return this.rRegionkey;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "rComment":
                return this.rComment;
            case "rName":
                return this.rName;
            case "rRegionkey":
                return this.rRegionkey;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "rComment":
                this.rComment = (String)val;
                break;
            case "rName":
                this.rName = (String)val;
                break;
            case "rRegionkey":
                this.rRegionkey = val == null ? 0 : (int)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.rComment);
        out.writeObject(this.rName);
        out.writeInt(this.rRegionkey);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.rComment = (String)in.readObject();
        this.rName = (String)in.readObject();
        this.rRegionkey = in.readInt();
    }

}
