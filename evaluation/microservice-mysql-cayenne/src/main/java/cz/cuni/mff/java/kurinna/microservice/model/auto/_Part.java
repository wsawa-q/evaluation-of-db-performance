package cz.cuni.mff.java.kurinna.microservice.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

/**
 * Class _Part was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Part extends BaseDataObject {

    private static final long serialVersionUID = 1L;


    public static final StringProperty<String> P_BRAND = PropertyFactory.createString("pBrand", String.class);
    public static final StringProperty<String> P_COMMENT = PropertyFactory.createString("pComment", String.class);
    public static final StringProperty<String> P_CONTAINER = PropertyFactory.createString("pContainer", String.class);
    public static final StringProperty<String> P_MFGR = PropertyFactory.createString("pMfgr", String.class);
    public static final StringProperty<String> P_NAME = PropertyFactory.createString("pName", String.class);
    public static final NumericProperty<Long> P_PARTKEY = PropertyFactory.createNumeric("pPartkey", Long.class);
    public static final NumericProperty<Double> P_RETAILPRICE = PropertyFactory.createNumeric("pRetailprice", Double.class);
    public static final NumericProperty<Integer> P_SIZE = PropertyFactory.createNumeric("pSize", Integer.class);
    public static final StringProperty<String> P_TYPE = PropertyFactory.createString("pType", String.class);

    protected String pBrand;
    protected String pComment;
    protected String pContainer;
    protected String pMfgr;
    protected String pName;
    protected long pPartkey;
    protected double pRetailprice;
    protected int pSize;
    protected String pType;


    public void setPBrand(String pBrand) {
        beforePropertyWrite("pBrand", this.pBrand, pBrand);
        this.pBrand = pBrand;
    }

    public String getPBrand() {
        beforePropertyRead("pBrand");
        return this.pBrand;
    }

    public void setPComment(String pComment) {
        beforePropertyWrite("pComment", this.pComment, pComment);
        this.pComment = pComment;
    }

    public String getPComment() {
        beforePropertyRead("pComment");
        return this.pComment;
    }

    public void setPContainer(String pContainer) {
        beforePropertyWrite("pContainer", this.pContainer, pContainer);
        this.pContainer = pContainer;
    }

    public String getPContainer() {
        beforePropertyRead("pContainer");
        return this.pContainer;
    }

    public void setPMfgr(String pMfgr) {
        beforePropertyWrite("pMfgr", this.pMfgr, pMfgr);
        this.pMfgr = pMfgr;
    }

    public String getPMfgr() {
        beforePropertyRead("pMfgr");
        return this.pMfgr;
    }

    public void setPName(String pName) {
        beforePropertyWrite("pName", this.pName, pName);
        this.pName = pName;
    }

    public String getPName() {
        beforePropertyRead("pName");
        return this.pName;
    }

    public void setPPartkey(long pPartkey) {
        beforePropertyWrite("pPartkey", this.pPartkey, pPartkey);
        this.pPartkey = pPartkey;
    }

    public long getPPartkey() {
        beforePropertyRead("pPartkey");
        return this.pPartkey;
    }

    public void setPRetailprice(double pRetailprice) {
        beforePropertyWrite("pRetailprice", this.pRetailprice, pRetailprice);
        this.pRetailprice = pRetailprice;
    }

    public double getPRetailprice() {
        beforePropertyRead("pRetailprice");
        return this.pRetailprice;
    }

    public void setPSize(int pSize) {
        beforePropertyWrite("pSize", this.pSize, pSize);
        this.pSize = pSize;
    }

    public int getPSize() {
        beforePropertyRead("pSize");
        return this.pSize;
    }

    public void setPType(String pType) {
        beforePropertyWrite("pType", this.pType, pType);
        this.pType = pType;
    }

    public String getPType() {
        beforePropertyRead("pType");
        return this.pType;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "pBrand":
                return this.pBrand;
            case "pComment":
                return this.pComment;
            case "pContainer":
                return this.pContainer;
            case "pMfgr":
                return this.pMfgr;
            case "pName":
                return this.pName;
            case "pPartkey":
                return this.pPartkey;
            case "pRetailprice":
                return this.pRetailprice;
            case "pSize":
                return this.pSize;
            case "pType":
                return this.pType;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "pBrand":
                this.pBrand = (String)val;
                break;
            case "pComment":
                this.pComment = (String)val;
                break;
            case "pContainer":
                this.pContainer = (String)val;
                break;
            case "pMfgr":
                this.pMfgr = (String)val;
                break;
            case "pName":
                this.pName = (String)val;
                break;
            case "pPartkey":
                this.pPartkey = val == null ? 0 : (long)val;
                break;
            case "pRetailprice":
                this.pRetailprice = val == null ? 0 : (double)val;
                break;
            case "pSize":
                this.pSize = val == null ? 0 : (int)val;
                break;
            case "pType":
                this.pType = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.pBrand);
        out.writeObject(this.pComment);
        out.writeObject(this.pContainer);
        out.writeObject(this.pMfgr);
        out.writeObject(this.pName);
        out.writeLong(this.pPartkey);
        out.writeDouble(this.pRetailprice);
        out.writeInt(this.pSize);
        out.writeObject(this.pType);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.pBrand = (String)in.readObject();
        this.pComment = (String)in.readObject();
        this.pContainer = (String)in.readObject();
        this.pMfgr = (String)in.readObject();
        this.pName = (String)in.readObject();
        this.pPartkey = in.readLong();
        this.pRetailprice = in.readDouble();
        this.pSize = in.readInt();
        this.pType = (String)in.readObject();
    }

}
