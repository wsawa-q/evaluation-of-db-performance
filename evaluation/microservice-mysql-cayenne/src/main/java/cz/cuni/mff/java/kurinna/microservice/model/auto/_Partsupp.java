package cz.cuni.mff.java.kurinna.microservice.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

/**
 * Class _Partsupp was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Partsupp extends BaseDataObject {

    private static final long serialVersionUID = 1L;


    public static final NumericProperty<Long> PS_AVAILQTY = PropertyFactory.createNumeric("psAvailqty", Long.class);
    public static final StringProperty<String> PS_COMMENT = PropertyFactory.createString("psComment", String.class);
    public static final NumericProperty<Long> PS_PARTKEY = PropertyFactory.createNumeric("psPartkey", Long.class);
    public static final NumericProperty<Long> PS_SUPPKEY = PropertyFactory.createNumeric("psSuppkey", Long.class);
    public static final NumericProperty<Double> PS_SUPPLYCOST = PropertyFactory.createNumeric("psSupplycost", Double.class);

    protected long psAvailqty;
    protected String psComment;
    protected long psPartkey;
    protected long psSuppkey;
    protected double psSupplycost;


    public void setPsAvailqty(long psAvailqty) {
        beforePropertyWrite("psAvailqty", this.psAvailqty, psAvailqty);
        this.psAvailqty = psAvailqty;
    }

    public long getPsAvailqty() {
        beforePropertyRead("psAvailqty");
        return this.psAvailqty;
    }

    public void setPsComment(String psComment) {
        beforePropertyWrite("psComment", this.psComment, psComment);
        this.psComment = psComment;
    }

    public String getPsComment() {
        beforePropertyRead("psComment");
        return this.psComment;
    }

    public void setPsPartkey(long psPartkey) {
        beforePropertyWrite("psPartkey", this.psPartkey, psPartkey);
        this.psPartkey = psPartkey;
    }

    public long getPsPartkey() {
        beforePropertyRead("psPartkey");
        return this.psPartkey;
    }

    public void setPsSuppkey(long psSuppkey) {
        beforePropertyWrite("psSuppkey", this.psSuppkey, psSuppkey);
        this.psSuppkey = psSuppkey;
    }

    public long getPsSuppkey() {
        beforePropertyRead("psSuppkey");
        return this.psSuppkey;
    }

    public void setPsSupplycost(double psSupplycost) {
        beforePropertyWrite("psSupplycost", this.psSupplycost, psSupplycost);
        this.psSupplycost = psSupplycost;
    }

    public double getPsSupplycost() {
        beforePropertyRead("psSupplycost");
        return this.psSupplycost;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "psAvailqty":
                return this.psAvailqty;
            case "psComment":
                return this.psComment;
            case "psPartkey":
                return this.psPartkey;
            case "psSuppkey":
                return this.psSuppkey;
            case "psSupplycost":
                return this.psSupplycost;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "psAvailqty":
                this.psAvailqty = val == null ? 0 : (long)val;
                break;
            case "psComment":
                this.psComment = (String)val;
                break;
            case "psPartkey":
                this.psPartkey = val == null ? 0 : (long)val;
                break;
            case "psSuppkey":
                this.psSuppkey = val == null ? 0 : (long)val;
                break;
            case "psSupplycost":
                this.psSupplycost = val == null ? 0 : (double)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.psAvailqty);
        out.writeObject(this.psComment);
        out.writeLong(this.psPartkey);
        out.writeLong(this.psSuppkey);
        out.writeDouble(this.psSupplycost);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.psAvailqty = in.readLong();
        this.psComment = (String)in.readObject();
        this.psPartkey = in.readLong();
        this.psSuppkey = in.readLong();
        this.psSupplycost = in.readDouble();
    }

}
