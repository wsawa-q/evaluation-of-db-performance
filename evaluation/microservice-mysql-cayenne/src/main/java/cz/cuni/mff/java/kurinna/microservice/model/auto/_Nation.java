package cz.cuni.mff.java.kurinna.microservice.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

/**
 * Class _Nation was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Nation extends BaseDataObject {

    private static final long serialVersionUID = 1L;


    public static final StringProperty<String> N_COMMENT = PropertyFactory.createString("nComment", String.class);
    public static final StringProperty<String> N_NAME = PropertyFactory.createString("nName", String.class);
    public static final NumericProperty<Integer> N_NATIONKEY = PropertyFactory.createNumeric("nNationkey", Integer.class);
    public static final NumericProperty<Integer> N_REGIONKEY = PropertyFactory.createNumeric("nRegionkey", Integer.class);

    protected String nComment;
    protected String nName;
    protected int nNationkey;
    protected int nRegionkey;


    public void setNComment(String nComment) {
        beforePropertyWrite("nComment", this.nComment, nComment);
        this.nComment = nComment;
    }

    public String getNComment() {
        beforePropertyRead("nComment");
        return this.nComment;
    }

    public void setNName(String nName) {
        beforePropertyWrite("nName", this.nName, nName);
        this.nName = nName;
    }

    public String getNName() {
        beforePropertyRead("nName");
        return this.nName;
    }

    public void setNNationkey(int nNationkey) {
        beforePropertyWrite("nNationkey", this.nNationkey, nNationkey);
        this.nNationkey = nNationkey;
    }

    public int getNNationkey() {
        beforePropertyRead("nNationkey");
        return this.nNationkey;
    }

    public void setNRegionkey(int nRegionkey) {
        beforePropertyWrite("nRegionkey", this.nRegionkey, nRegionkey);
        this.nRegionkey = nRegionkey;
    }

    public int getNRegionkey() {
        beforePropertyRead("nRegionkey");
        return this.nRegionkey;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "nComment":
                return this.nComment;
            case "nName":
                return this.nName;
            case "nNationkey":
                return this.nNationkey;
            case "nRegionkey":
                return this.nRegionkey;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "nComment":
                this.nComment = (String)val;
                break;
            case "nName":
                this.nName = (String)val;
                break;
            case "nNationkey":
                this.nNationkey = val == null ? 0 : (int)val;
                break;
            case "nRegionkey":
                this.nRegionkey = val == null ? 0 : (int)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.nComment);
        out.writeObject(this.nName);
        out.writeInt(this.nNationkey);
        out.writeInt(this.nRegionkey);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.nComment = (String)in.readObject();
        this.nName = (String)in.readObject();
        this.nNationkey = in.readInt();
        this.nRegionkey = in.readInt();
    }

}
