package cz.cuni.mff.java.kurinna.microservice.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDate;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

/**
 * Class _Orders was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Orders extends BaseDataObject {

    private static final long serialVersionUID = 1L;


    public static final StringProperty<String> O_CLERK = PropertyFactory.createString("oClerk", String.class);
    public static final StringProperty<String> O_COMMENT = PropertyFactory.createString("oComment", String.class);
    public static final NumericProperty<Long> O_CUSTKEY = PropertyFactory.createNumeric("oCustkey", Long.class);
    public static final DateProperty<LocalDate> O_ORDERDATE = PropertyFactory.createDate("oOrderdate", LocalDate.class);
    public static final NumericProperty<Long> O_ORDERKEY = PropertyFactory.createNumeric("oOrderkey", Long.class);
    public static final StringProperty<String> O_ORDERPRIORITY = PropertyFactory.createString("oOrderpriority", String.class);
    public static final StringProperty<String> O_ORDERSTATUS = PropertyFactory.createString("oOrderstatus", String.class);
    public static final NumericProperty<Integer> O_SHIPPRIORITY = PropertyFactory.createNumeric("oShippriority", Integer.class);
    public static final NumericProperty<Double> O_TOTALPRICE = PropertyFactory.createNumeric("oTotalprice", Double.class);

    protected String oClerk;
    protected String oComment;
    protected long oCustkey;
    protected LocalDate oOrderdate;
    protected long oOrderkey;
    protected String oOrderpriority;
    protected String oOrderstatus;
    protected int oShippriority;
    protected double oTotalprice;


    public void setOClerk(String oClerk) {
        beforePropertyWrite("oClerk", this.oClerk, oClerk);
        this.oClerk = oClerk;
    }

    public String getOClerk() {
        beforePropertyRead("oClerk");
        return this.oClerk;
    }

    public void setOComment(String oComment) {
        beforePropertyWrite("oComment", this.oComment, oComment);
        this.oComment = oComment;
    }

    public String getOComment() {
        beforePropertyRead("oComment");
        return this.oComment;
    }

    public void setOCustkey(long oCustkey) {
        beforePropertyWrite("oCustkey", this.oCustkey, oCustkey);
        this.oCustkey = oCustkey;
    }

    public long getOCustkey() {
        beforePropertyRead("oCustkey");
        return this.oCustkey;
    }

    public void setOOrderdate(LocalDate oOrderdate) {
        beforePropertyWrite("oOrderdate", this.oOrderdate, oOrderdate);
        this.oOrderdate = oOrderdate;
    }

    public LocalDate getOOrderdate() {
        beforePropertyRead("oOrderdate");
        return this.oOrderdate;
    }

    public void setOOrderkey(long oOrderkey) {
        beforePropertyWrite("oOrderkey", this.oOrderkey, oOrderkey);
        this.oOrderkey = oOrderkey;
    }

    public long getOOrderkey() {
        beforePropertyRead("oOrderkey");
        return this.oOrderkey;
    }

    public void setOOrderpriority(String oOrderpriority) {
        beforePropertyWrite("oOrderpriority", this.oOrderpriority, oOrderpriority);
        this.oOrderpriority = oOrderpriority;
    }

    public String getOOrderpriority() {
        beforePropertyRead("oOrderpriority");
        return this.oOrderpriority;
    }

    public void setOOrderstatus(String oOrderstatus) {
        beforePropertyWrite("oOrderstatus", this.oOrderstatus, oOrderstatus);
        this.oOrderstatus = oOrderstatus;
    }

    public String getOOrderstatus() {
        beforePropertyRead("oOrderstatus");
        return this.oOrderstatus;
    }

    public void setOShippriority(int oShippriority) {
        beforePropertyWrite("oShippriority", this.oShippriority, oShippriority);
        this.oShippriority = oShippriority;
    }

    public int getOShippriority() {
        beforePropertyRead("oShippriority");
        return this.oShippriority;
    }

    public void setOTotalprice(double oTotalprice) {
        beforePropertyWrite("oTotalprice", this.oTotalprice, oTotalprice);
        this.oTotalprice = oTotalprice;
    }

    public double getOTotalprice() {
        beforePropertyRead("oTotalprice");
        return this.oTotalprice;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "oClerk":
                return this.oClerk;
            case "oComment":
                return this.oComment;
            case "oCustkey":
                return this.oCustkey;
            case "oOrderdate":
                return this.oOrderdate;
            case "oOrderkey":
                return this.oOrderkey;
            case "oOrderpriority":
                return this.oOrderpriority;
            case "oOrderstatus":
                return this.oOrderstatus;
            case "oShippriority":
                return this.oShippriority;
            case "oTotalprice":
                return this.oTotalprice;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "oClerk":
                this.oClerk = (String)val;
                break;
            case "oComment":
                this.oComment = (String)val;
                break;
            case "oCustkey":
                this.oCustkey = val == null ? 0 : (long)val;
                break;
            case "oOrderdate":
                this.oOrderdate = (LocalDate)val;
                break;
            case "oOrderkey":
                this.oOrderkey = val == null ? 0 : (long)val;
                break;
            case "oOrderpriority":
                this.oOrderpriority = (String)val;
                break;
            case "oOrderstatus":
                this.oOrderstatus = (String)val;
                break;
            case "oShippriority":
                this.oShippriority = val == null ? 0 : (int)val;
                break;
            case "oTotalprice":
                this.oTotalprice = val == null ? 0 : (double)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.oClerk);
        out.writeObject(this.oComment);
        out.writeLong(this.oCustkey);
        out.writeObject(this.oOrderdate);
        out.writeLong(this.oOrderkey);
        out.writeObject(this.oOrderpriority);
        out.writeObject(this.oOrderstatus);
        out.writeInt(this.oShippriority);
        out.writeDouble(this.oTotalprice);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.oClerk = (String)in.readObject();
        this.oComment = (String)in.readObject();
        this.oCustkey = in.readLong();
        this.oOrderdate = (LocalDate)in.readObject();
        this.oOrderkey = in.readLong();
        this.oOrderpriority = (String)in.readObject();
        this.oOrderstatus = (String)in.readObject();
        this.oShippriority = in.readInt();
        this.oTotalprice = in.readDouble();
    }

}
